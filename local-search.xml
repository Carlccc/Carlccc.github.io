<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Pthon 基础</title>
    <link href="/2020/08/19/python%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/08/19/python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h5 id="1-编译型语言和解释型语言的区别"><a href="#1-编译型语言和解释型语言的区别" class="headerlink" title="1. 编译型语言和解释型语言的区别"></a>1. 编译型语言和解释型语言的区别</h5><p>编译型语言(强类型语言) :  一次编译，到处运行 例：c, c++, java等<br>解释型语言(弱类型语言)：不需要编译，直接调用解释器执行 例：php，python， shell</p><p>解释型语言修改完后，不需要编译，执行流程是从上到下依次解释执行。shell</p><h6 id="1-1-python的优势和劣势"><a href="#1-1-python的优势和劣势" class="headerlink" title="1.1 python的优势和劣势"></a>1.1 python的优势和劣势</h6><p>优势：</p><ul><li>简单易上手</li><li>大量的第三方的安装包  jekins, k8s api包  胶水语言</li></ul><p>劣势：</p><ul><li>速度慢 和c, c++, java比</li></ul><h5 id="2-演示python的安装和pycharm安装"><a href="#2-演示python的安装和pycharm安装" class="headerlink" title="2. 演示python的安装和pycharm安装"></a>2. 演示python的安装和pycharm安装</h5><h5 id="3-python的入门程序"><a href="#3-python的入门程序" class="headerlink" title="3. python的入门程序"></a>3. python的入门程序</h5><pre><code class="hljs python">print(<span class="hljs-string">&#x27;hellowrold!&#x27;</span>)</code></pre><p>执行原理：</p><blockquote><p>右键执行的时候，会自动调用python解释器从上到下依次执行python代码。类比 shell。</p></blockquote><p>ps: 交互式命令行的执行方式  python3  —-》 ipython</p><p>编辑器和命令行式的写法的区别和应用场景：</p><blockquote><p>编辑器适用于大型的项目，命令行适用于小的测试</p></blockquote><h5 id="4-python的变量"><a href="#4-python的变量" class="headerlink" title="4. python的变量"></a>4. python的变量</h5><pre><code class="hljs python">x = <span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">3</span>+<span class="hljs-number">4</span>+<span class="hljs-number">5</span>  y = x*<span class="hljs-number">5</span> + <span class="hljs-number">6</span>z = y*<span class="hljs-number">7</span>print(z)</code></pre><blockquote><p>变量就是将中间的结果暂存到内存,以便后续程序调用</p></blockquote><p>类比shell， 和shell中的变量的定义是一致的。<br>但是和shell中不一样的地方的是：shell的等号两边不允许有空格，但是python等号两边也可以没有空格。那为啥必须要有空格？</p><ul><li>从视觉上会好看一些，调试代码比较舒服</li><li>写代码，需要遵循 PEP8 规范  <ul><li>变量的等号两边必须是有空格的，各大公司code review</li><li><strong>变量名必须要有意义</strong> </li><li>变量名只能是 字母、数字或下划线的任意组合</li><li>变量名建议不使用拼音和中文</li><li>变量的要具有意义</li><li>变量名不要过长</li></ul></li></ul><p><strong>编程语言的三种风格</strong></p><ul><li><p>大驼峰法    单词的首字母一定是大写的。</p><blockquote><p>UserName,   GetInfo, 等</p></blockquote></li><li><p>小驼峰法   单词的首字母小写，其余大写 </p><blockquote><p>userName </p></blockquote></li><li><p>下划线法  单词和单词之间使用下划线拼接</p><blockquote><p>user_name</p></blockquote></li></ul><p>在代码 code review (代码评审) , 我们要求三种风格你可以随便选择一种你喜欢的风格，但是大家在选择完成之后，一定要主要的是，千万别中途换风格。</p><h5 id="5-python的基础数据类型"><a href="#5-python的基础数据类型" class="headerlink" title="5. python的基础数据类型"></a>5. python的基础数据类型</h5><ul><li><p>整型</p><blockquote><p>表示一个整数的<br>num = 13  ### int<br>print(num, type(num))</p></blockquote></li><li><p>字符串</p><blockquote><p> 字符串会嵌套<br>name = “dj’sa’b”  ## 外层双引号，内层要求是单引号<br>name2 = ‘ds”ad”sa’ ## 外层单引号，内层要求是双引号<br>hhh = “dvshavhhhhhhhhhhhhhhh” \</p><pre><code>&quot;dsadsadsadsa&quot;</code></pre><p>使用三引号<br>kkk = ‘’’<br>dnsajndsandjansdnas<br>曾老师<br>boduo老师<br>‘’’<br>print(kkk, type(kkk))</p></blockquote></li><li><p>布尔</p><pre><code class="hljs pgsql"><span class="hljs-type">bool</span> 值：<span class="hljs-keyword">False</span>, <span class="hljs-keyword">True</span></code></pre><p>  print(3&gt;7) ## False</p><p>  print(5&gt;4) ## True</p></li></ul><h6 id="5-1-注释"><a href="#5-1-注释" class="headerlink" title="5.1 注释"></a>5.1 注释</h6><pre><code class="hljs 1c"><span class="hljs-meta">### : python 注释，unix的注释方式</span><span class="hljs-comment">//  : java， c, c++ 的注释方式</span>&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;: python多行注释/*这是多行注释*/</code></pre><h5 id="6-输入"><a href="#6-输入" class="headerlink" title="6. 输入"></a>6. 输入</h5><pre><code class="hljs python"><span class="hljs-comment">###交互程序</span><span class="hljs-comment"># name = input(&quot;请输入名字：&quot;) ### 输入的值的类型是字符串类型的，input程序交互获取到的内容是字符串</span>num = input(<span class="hljs-string">&#x27;请输入数字:&#x27;</span>)print(type(num)) <span class="hljs-comment">### &lt;class &#x27;str&#x27;&gt;</span>print(int(num) + <span class="hljs-number">5</span>)</code></pre><p>int(‘12’) : 会将字符串类型的整肃转换成整型</p><h4 id="7-流程控制"><a href="#7-流程控制" class="headerlink" title="7. 流程控制"></a>7. 流程控制</h4><h5 id="7-1-分支"><a href="#7-1-分支" class="headerlink" title="7. 1 分支"></a>7. 1 分支</h5><pre><code class="hljs python"><span class="hljs-keyword">if</span> 表达式:    开始写逻辑代码  <span class="hljs-comment">### 必须要4个空格</span>num = <span class="hljs-number">234</span><span class="hljs-keyword">if</span> num == <span class="hljs-number">123</span>:    print(<span class="hljs-string">&#x27;dsadsa&#x27;</span>)<span class="hljs-keyword">else</span>:    print(<span class="hljs-string">&#x27;kkkkkk&#x27;</span>)</code></pre><p><strong>注意： if.. else的语句只能执行一个</strong></p><pre><code class="hljs python"><span class="hljs-comment">#### if elif else   只要满足一个条件，那就会立即执行相应的代码，执行完毕之后立即退出</span>num = input(<span class="hljs-string">&#x27;请输入要比较的数字:&#x27;</span>)<span class="hljs-keyword">if</span> int(num) &gt;= <span class="hljs-number">22</span>:    print(<span class="hljs-string">&#x27;可以扯证了&#x27;</span>)<span class="hljs-keyword">elif</span> int(num) &gt;= <span class="hljs-number">18</span>:    print(<span class="hljs-string">&#x27;成年了,可以干一些成年的事了&#x27;</span>)<span class="hljs-keyword">elif</span> int(num) &lt; <span class="hljs-number">18</span>:    print(<span class="hljs-string">&#x27;还是小屁孩&#x27;</span>)</code></pre><p><strong>只要满足一个条件，那就会立即执行相应的代码，执行完毕之后立即退出</strong></p><pre><code class="hljs python">name = input(<span class="hljs-string">&#x27;请输入名字:&#x27;</span>)<span class="hljs-keyword">if</span> name == <span class="hljs-string">&#x27;meet&#x27;</span>:    age = input(<span class="hljs-string">&#x27;请输入年龄:&#x27;</span>)    <span class="hljs-keyword">if</span> int(age) == <span class="hljs-number">18</span>:        print(<span class="hljs-string">&#x27;输入全部正确&#x27;</span>)    <span class="hljs-keyword">elif</span> int(age) &gt;= <span class="hljs-number">22</span>:        print(<span class="hljs-string">&#x27;xxxxxxxx&#x27;</span>)       <span class="hljs-keyword">else</span>:        print(<span class="hljs-string">&#x27;年龄输入错误!&#x27;</span>)<span class="hljs-keyword">else</span>:    print(<span class="hljs-string">&#x27;名字输入错误!&#x27;</span>)</code></pre><p><strong>if else 我们只能写一个，而elif可以写多个条件表达</strong></p><h5 id="7-2-循环控制"><a href="#7-2-循环控制" class="headerlink" title="7.2 循环控制"></a>7.2 循环控制</h5><ul><li>while 循环</li></ul><pre><code class="hljs python"><span class="hljs-comment">### 基本款</span><span class="hljs-keyword">while</span> 条件:    <span class="hljs-comment"># 循环体</span>    <span class="hljs-comment"># 如果条件为真，那么循环则执行</span>    <span class="hljs-comment"># 如果条件为假，那么循环不执行</span>例子：num = int(input(<span class="hljs-string">&#x27;请输入数字:&#x27;</span>))  <span class="hljs-comment">## 12</span><span class="hljs-keyword">while</span> num &gt; <span class="hljs-number">0</span>: <span class="hljs-comment">### 每次循环num和0会进行比较，没如果为True,则执行代码块中的内容</span>    print(<span class="hljs-string">&#x27;dsadsadasdsasa&#x27;</span>)    num = num - <span class="hljs-number">1</span><span class="hljs-keyword">else</span>:   <span class="hljs-comment">#### 循环退出之后，都会执行else中的代码</span>    print(<span class="hljs-string">&#x27;last line.....&#x27;</span>)</code></pre><p>两大关键字：<br>break 和 continue：</p><ul><li>break：    退出整个循环，循环已经退出</li><li>continue:  跳出本次循环， 循环并没有退出</li></ul><pre><code class="hljs python"><span class="hljs-comment">#### break ： 当警察抓到犯人的时候，后面即便有人，也不会做任何操作，直接退出</span><span class="hljs-comment"># num = int(input(&#x27;请输入数字:&#x27;))  ## 12</span><span class="hljs-comment">#</span><span class="hljs-comment"># while num &gt; 0: ### 每次循环num和0会进行比较，没如果为True,则执行代码块中的内容</span><span class="hljs-comment">#     num = num - 1  ## 第一次：num=11 第二次：num=10 第三次：num=9，，当num=5</span><span class="hljs-comment">#     if num == 5:</span><span class="hljs-comment">#         break   ### 退出整个循环</span><span class="hljs-comment">#     print(&#x27;后续代码...&#x27;) ## 第一次打印，第二次打印，第三次打印，。。。。</span><span class="hljs-comment">### continue ： 警察查身份证，</span>num = int(input(<span class="hljs-string">&#x27;请输入数字:&#x27;</span>))  <span class="hljs-comment">## 12</span><span class="hljs-keyword">while</span> num &gt; <span class="hljs-number">0</span>:  <span class="hljs-comment">### 每次循环num和0会进行比较，没如果为True,则执行代码块中的内容</span>    num = num - <span class="hljs-number">1</span>  <span class="hljs-comment">## 第一次：num=11 第二次：num=10 第三次：num=9，，当num=5</span>    <span class="hljs-keyword">if</span> num == <span class="hljs-number">5</span>:        <span class="hljs-keyword">continue</span>  <span class="hljs-comment">### 跳出当前循环， 循环并没与退出</span>    print(<span class="hljs-string">&#x27;后续代码...&#x27;</span>)  <span class="hljs-comment">## 第一次打印，第二次打印，第三次打印，。。。。</span></code></pre><ul><li>for 循环<br>&lt;!–hexoPostRenderEscape:<pre><code class="hljs python"><span class="hljs-comment">### kkk 代表的是每一次循环的时候，目标对象s中的每一个元素</span><br><span class="hljs-comment">### 当循环到最后一个元素的时候，会自动退出</span><br>s = <span class="hljs-string">&#x27;pounds&#x27;</span></li></ul><p><span class="hljs-keyword">for</span> kkk <span class="hljs-keyword">in</span> s:<br>    print(kkk)</code></pre>:hexoPostRenderEscape–&gt;</p><p><strong>总结：任何语言无外乎三大流程控制结构</strong></p><ul><li>顺序</li><li>分支</li><li>循环</li></ul><p>是 姚期智 提出的</p><p>能够触类旁通，意思就是python学完之后， 在学go的时候，应该是没没任何压力的。<br>前年，参加校招。西安交大，西安大学<br>java， c++， 但是他们的数据结构和算法的功底非常的深厚</p><hr><h4 id="8-格式化输出"><a href="#8-格式化输出" class="headerlink" title="8. 格式化输出"></a>8. 格式化输出</h4><p>% , format</p><pre><code class="hljs python"><span class="hljs-comment">### 第一种写法：字符串使用+ 不断的进行拼接</span><span class="hljs-comment"># name = input(&#x27;请输入姓名:&#x27;)</span><span class="hljs-comment"># age = input(&#x27;请输入年龄:&#x27;)</span><span class="hljs-comment"># job = input(&#x27;请输入职业:&#x27;)</span><span class="hljs-comment"># hobby = input(&#x27;请输入爱好:&#x27;)</span><span class="hljs-comment"># a = &#x27;------------ info of 51devops ----------&#x27;</span><span class="hljs-comment"># b = &#x27;Name:&#x27;</span><span class="hljs-comment"># c = &#x27;Age:&#x27;</span><span class="hljs-comment"># d = &#x27;Job:&#x27;</span><span class="hljs-comment"># e = &#x27;Hobby:&#x27;</span><span class="hljs-comment"># f = &#x27;------------- end ----------------&#x27;</span><span class="hljs-comment">#</span><span class="hljs-comment"># print(a+&#x27;\n&#x27;+b+name+&#x27;\n&#x27;+c+age+&#x27;\n&#x27;+d+job+&#x27;\n&#x27;+e+hobby+&#x27;\n&#x27;+f)</span><span class="hljs-comment">### 第二种方法, 也有人用，用的还挺多。但是要求格式化传入的值和占位符的值需要一一对应</span><span class="hljs-comment"># name = input(&#x27;请输入姓名:&#x27;)</span><span class="hljs-comment"># age = input(&#x27;请输入年龄:&#x27;)</span><span class="hljs-comment"># job = input(&#x27;请输入职业:&#x27;)</span><span class="hljs-comment"># hobby = input(&#x27;请输入爱好:&#x27;)</span><span class="hljs-comment">#</span><span class="hljs-comment"># msg = &#x27;&#x27;&#x27;</span><span class="hljs-comment"># ------------ info of 51devops ----------</span><span class="hljs-comment"># Name  : %s</span><span class="hljs-comment"># Age   : %s</span><span class="hljs-comment"># job   : %s</span><span class="hljs-comment"># Hobbie: %s</span><span class="hljs-comment"># ------------- end ----------------</span><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><span class="hljs-comment"># ### % 格式化的  而msg中的%s叫字符串占位符，</span><span class="hljs-comment"># print(msg % (age, name, job, hobby))</span><span class="hljs-comment">#### 第三种方法， 使用format函数来进行格式化</span>name = input(<span class="hljs-string">&#x27;请输入姓名:&#x27;</span>)age = input(<span class="hljs-string">&#x27;请输入年龄:&#x27;</span>)job = input(<span class="hljs-string">&#x27;请输入职业:&#x27;</span>)hobby = input(<span class="hljs-string">&#x27;请输入爱好:&#x27;</span>)msg = <span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">------------ info of 51devops ----------</span><span class="hljs-string">Name  : &#123;name1&#125;</span><span class="hljs-string">Age   : &#123;age1&#125;</span><span class="hljs-string">job   : &#123;job1&#125;</span><span class="hljs-string">Hobbie: &#123;hobby1&#125;</span><span class="hljs-string">------------- end ----------------</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>print(msg.format(age1=age, name1=name, job1=job, hobby1=hobby))</code></pre><h4 id="9-运算符"><a href="#9-运算符" class="headerlink" title="9. 运算符"></a>9. 运算符</h4><ul><li>算数运算</li></ul><pre><code class="hljs python">% ： 取余数// : 取整数</code></pre><ul><li>赋值运算</li></ul><pre><code class="hljs python">a = <span class="hljs-number">10</span>a = a - <span class="hljs-number">1</span>a = a / <span class="hljs-number">2</span>a = a * <span class="hljs-number">2</span></code></pre><ul><li>逻辑运算</li></ul><pre><code class="hljs python"><span class="hljs-keyword">and</span> : 与的意思 ， 要求<span class="hljs-keyword">and</span>的左右两边的表达式的值都是<span class="hljs-literal">True</span></code></pre><h4 id="10-逻辑表达式"><a href="#10-逻辑表达式" class="headerlink" title="10.逻辑表达式"></a>10.逻辑表达式</h4><pre><code class="hljs clean">### and or 别名： 短路运算符, 如果左边的表达式值为false的话，直接返回，不再去判断右边的结果#### and ： 左右两边的表达式必须都为<span class="hljs-literal">True</span>，最后结果才为<span class="hljs-literal">True</span>num = <span class="hljs-number">10</span>a = <span class="hljs-number">13</span>ret = num &lt; <span class="hljs-number">12</span> and a &gt; <span class="hljs-number">2</span>print(ret) ### <span class="hljs-literal">False</span>#### or ： 或， 左右两边的表达式只要有一个值为true， 就立即返回<span class="hljs-literal">True</span>num = <span class="hljs-number">15</span>a = <span class="hljs-number">13</span>ret = (num &gt; <span class="hljs-number">12</span>) or (a &gt; <span class="hljs-number">2</span>)print(ret) ### <span class="hljs-literal">False</span></code></pre><h4 id="11-字符串的常规操作"><a href="#11-字符串的常规操作" class="headerlink" title="11.字符串的常规操作"></a>11.字符串的常规操作</h4><pre><code class="hljs clean"># s = <span class="hljs-string">&quot;pounds&quot;</span># ret = s.startswith(<span class="hljs-string">&#x27;xxxx&#x27;</span>) ### 判断字符串是否以某个字符开头# ret = s.endswith(<span class="hljs-string">&#x27;s&#x27;</span>) ### 以某个字符串结尾# ret = len(s) ### 字符串的长度# name = input(<span class="hljs-string">&#x27;请输入名字:&#x27;</span>)# ret = name.strip() ### 去除字符串左右两边的空格  ****# ret = s.upper()  ### 字符串大写# ret = s.lower() ### 字符串小写# ret = s.title() ### 字符串首字母大写# video_file_name = <span class="hljs-string">&quot;高清无码爱情动作片.mp4&quot;</span># new_file_name = video_file_name.replace(<span class="hljs-string">&quot;mp4&quot;</span>,<span class="hljs-string">&quot;avi&quot;</span>) #### 字符串的替换  ***# # final_file_name = new_file_name.replace(<span class="hljs-string">&quot;无码&quot;</span>,<span class="hljs-string">&quot;步兵&quot;</span>)# print(new_file_name)# data = <span class="hljs-string">&quot;pounds|boduo|cang&quot;</span># ret = data.split(<span class="hljs-string">&#x27;|&#x27;</span>)   ###### 将字符串按照某一个特殊的分隔符进行分割，结果是数组 *******# print(ret)  ### [<span class="hljs-string">&#x27;pounds&#x27;</span>, <span class="hljs-string">&#x27;boduo&#x27;</span>, <span class="hljs-string">&#x27;cang&#x27;</span>]# ret = [<span class="hljs-string">&#x27;pounds&#x27;</span>, <span class="hljs-string">&#x27;boduo&#x27;</span>, <span class="hljs-string">&#x27;cang&#x27;</span>]# r = <span class="hljs-string">&quot;-&quot;</span>.join(ret)  #### 将列表转换成字符串  *******# print(r)# v1 = <span class="hljs-string">&quot;0x1238871&quot;</span># ret = v1.isdecimal() #查看十进制# print(ret)</code></pre><h4 id="12-索引"><a href="#12-索引" class="headerlink" title="12. 索引"></a>12. 索引</h4><p>提到索引，立马想到的一个概念是：索引都是从 0 开始计数的的</p><p>12.1索引的取值</p><pre><code class="hljs python">name = <span class="hljs-string">&#x27;hello&#x27;</span>print(name[<span class="hljs-number">0</span>])  <span class="hljs-comment">### h</span><span class="hljs-comment"># print(name[6])  ### 报错</span>print(name[<span class="hljs-number">-1</span>])</code></pre><p>12.2 切片 </p><pre><code class="hljs python"><span class="hljs-comment"># name = &#x27;h e l l o w o r l d&#x27;</span><span class="hljs-comment">#         0 1 2 3 4 5 6 7 8 9</span>name = <span class="hljs-string">&#x27;helloworld&#x27;</span>print(name[<span class="hljs-number">4</span>:<span class="hljs-number">7</span>]) <span class="hljs-comment">### 前包后不包， 或者叫 左闭右开</span></code></pre><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string"># name = &#x27;h e l l o w o r l d&#x27;</span><span class="hljs-string">#         0 1 2 3 4 5 6 7 8 9</span><span class="hljs-string">                       -3 -2 -1</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>name = <span class="hljs-string">&#x27;helloworld&#x27;</span><span class="hljs-comment"># print(name[4:7]) ### 前包后不包， 或者叫 左闭右开</span><span class="hljs-comment"># print(name[:]) ### 从头切到尾</span><span class="hljs-comment"># print(name[:5])  ### hello  从开始切刀5</span><span class="hljs-comment"># print(name[2:])  ### 从2开始切刀最后</span>print(name[<span class="hljs-number">2</span>:<span class="hljs-number">-1</span>])</code></pre><h4 id="13-python基础数据类型之列表和元组"><a href="#13-python基础数据类型之列表和元组" class="headerlink" title="13. python基础数据类型之列表和元组"></a>13. python基础数据类型之列表和元组</h4><ul><li><p>列表   其他语言叫数组</p><ul><li><p>定义：用来存储比较复杂的数据 </p></li><li><p>用法：name_list = [‘老陈’, ‘老赵’,  ‘文亮’] </p></li><li><p>定义2： name_list = list() </p></li><li><p>增删改查  常用的方法： remove， pop， append，for循环 改索引</p><p>pop, remove，和del的区别：</p></li><li><p>pop弹出，弹出之后的元素是可以赋值给其他变量用的</p></li><li><p>remove和del, 直接删除元素</p></li><li><p>remove就是通过值删除这个元素</p></li><li><p>del 通过索引来删除值</p><p>pop 是弹出，后面可以引用，remove，del是直接删除    </p></li></ul></li><li><p>列表的切片：<br>&lt;!–hexoPostRenderEscape:<pre><code class="hljs python"><br>user_list = [<span class="hljs-string">&quot;王宝强&quot;</span>,<span class="hljs-string">&quot;陈羽凡&quot;</span>,<span class="hljs-string">&quot;贾乃亮&quot;</span>, <span class="hljs-string">&#x27;xxxx&#x27;</span>, <span class="hljs-string">&#x27;波多老师&#x27;</span>]</p><pre><code>          &lt;span class=&quot;hljs-comment&quot;&gt;# 0      1       2        3       4&lt;/span&gt;          &lt;span class=&quot;hljs-comment&quot;&gt;# -5    -4       -3      -2       -1&lt;/span&gt;</code></pre></li></ul><p><span class="hljs-comment">### 通过索引下标来获取子列表</span><br><span class="hljs-comment">### 符合前包后不包的原则</span><br>users = user_list[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]<br>print(users)<br>users = user_list[:]  <span class="hljs-comment">### 表示的是 从头切到尾</span><br>users = user_list[<span class="hljs-number">2</span>:] <span class="hljs-comment">### 表示的是 从2 开始切到结尾</span><br>users = user_list[:<span class="hljs-number">4</span>] <span class="hljs-comment">## 从头开始切</span></code></pre>:hexoPostRenderEscape–&gt;</p><ul><li>列表的循环</li></ul><pre><code class="hljs python"><span class="hljs-comment">### for循环打印</span>user_list = [<span class="hljs-string">&quot;范德彪&quot;</span>,<span class="hljs-string">&quot;刘华强&quot;</span>,<span class="hljs-string">&#x27;尼古拉斯赵四&#x27;</span>,<span class="hljs-string">&quot;宋小宝&quot;</span>,<span class="hljs-string">&quot;刘能&quot;</span>]<span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> user_list:    print(item)<span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> enumerate(user_list):    print(i, v)</code></pre><p><strong>只需要元素，则使用第一种循环， 若需要索引下标，则使用第二种循环</strong></p><ul><li>列表和字符串的互相转换<br>&lt;!–hexoPostRenderEscape:<pre><code class="hljs python"><span class="hljs-comment">### 1.字符串转列表</span><br>name = <span class="hljs-string">&quot;hello_world&quot;</span><br>names = name.split(<span class="hljs-string">&#x27;_&#x27;</span>)</li></ul><p>print(names)<span class="hljs-comment">#### [&#x27;hello&#x27;, &#x27;world&#x27;]</span></p><p><span class="hljs-comment">### 2. 列表转字符串</span><br>names_list = [<span class="hljs-string">&quot;范德彪&quot;</span>,<span class="hljs-string">&quot;刘华强&quot;</span>,<span class="hljs-string">&#x27;尼古拉斯赵四&#x27;</span>,<span class="hljs-string">&quot;宋小宝&quot;</span>,<span class="hljs-string">&quot;刘能&quot;</span>]</p><p><span class="hljs-comment">### 将上述元素通过下划线拼接成字符串</span><br>res = <span class="hljs-string">&#x27;_&#x27;</span>.join(names_list)<br>print(res, type(res))</code></pre>:hexoPostRenderEscape–&gt;</p><p><strong>列表的增删改查，下去复习列表的基本操作的时候，遵循这个增删改查的原则</strong></p><h4 id="14-python的基础数据类型之字典和集合"><a href="#14-python的基础数据类型之字典和集合" class="headerlink" title="14. python的基础数据类型之字典和集合"></a>14. python的基础数据类型之字典和集合</h4><p><strong>字典和列表一样的重要</strong></p><p>python里叫字典，而其他语言java： 哈希table   hashtable</p><p>定义方式：</p><p>最长用的两种</p><pre><code class="hljs python">第一种：<span class="hljs-comment"># info = &#123;</span><span class="hljs-comment">#     &quot;name&quot;: &#x27;szk&#x27;,</span><span class="hljs-comment">#     &quot;age&quot; : 18,</span><span class="hljs-comment">#     &quot;height&quot;: 180</span><span class="hljs-comment"># &#125;</span>第二种user_info = [    &#123;        <span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;陈顺阳&#x27;</span>,        <span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">30</span>    &#125;,    &#123;        <span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;杜峰&#x27;</span>,        <span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">32</span>    &#125;,    &#123;        <span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;pounds&#x27;</span>,        <span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">32</span>    &#125;]</code></pre><p>字典的增删改查（crud）：</p><pre><code class="hljs python">info = &#123;<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">12</span>, <span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-literal">True</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;szk&quot;</span>,<span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;xx@live.com&quot;</span>&#125;<span class="hljs-comment">### 1.获取字典的键</span><span class="hljs-comment"># keys = info.keys()</span><span class="hljs-comment"># for k in keys:</span><span class="hljs-comment">#     print(k)</span><span class="hljs-comment">#</span><span class="hljs-comment"># ### 2. 获取字典的所有值</span><span class="hljs-comment"># values = info.values()</span><span class="hljs-comment"># for v in values:</span><span class="hljs-comment">#     print(v)</span><span class="hljs-comment">### 3.要获取字典的值又要获取字典的key, 非常重要的方法</span><span class="hljs-comment"># for k, v in info.items():</span><span class="hljs-comment">#     print(k, v)</span><span class="hljs-comment">### 根据键来获取值  重要</span><span class="hljs-comment"># print(info[&#x27;height&#x27;])</span>data = info.get(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment"># 根据name为键去info字典中获取对应的值，如果不存在则返回None，存在则返回值。</span>print(data) <span class="hljs-comment"># 输出：None</span><span class="hljs-comment">### 4.更新键值对</span><span class="hljs-comment"># info2 = &#123;&quot;age&quot;:12, &quot;status&quot;:True&#125;</span><span class="hljs-comment">#</span><span class="hljs-comment"># # info2.update(age=14, name=&#x27;szk&#x27;) ### 如果key存在的话，就会更新原有的值，若不存在，将这个name值加入info2</span><span class="hljs-comment">#### 5.增加</span><span class="hljs-comment"># info2[&#x27;name&#x27;] = &#x27;szk&#x27; ###向字典中添加一个元素</span><span class="hljs-comment">#</span><span class="hljs-comment"># print(info2)</span><span class="hljs-comment">### 6.删除</span>info2 = &#123;<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">12</span>, <span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-literal">True</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;szk&quot;</span>&#125;<span class="hljs-comment"># data = info2.pop(&quot;age&quot;) ### 根据键来删除元素</span><span class="hljs-comment"># print(info2) # &#123;&#x27;status&#x27;: True, &#x27;name&#x27;: &#x27;szk&#x27;&#125;</span><span class="hljs-comment"># print(data) # 12</span><span class="hljs-keyword">del</span> info2[<span class="hljs-string">&#x27;age&#x27;</span>]print(info2)</code></pre><ul><li>集合的特性<br>&lt;!–hexoPostRenderEscape:<pre><code class="hljs python"><span class="hljs-comment">### 2.交集</span><br>s1 = &#123;<span class="hljs-string">&quot;刘能&quot;</span>, <span class="hljs-string">&quot;赵四&quot;</span>, <span class="hljs-string">&quot;⽪⻓⼭&quot;</span>&#125;<br>s2 = &#123;<span class="hljs-string">&quot;刘科⻓&quot;</span>, <span class="hljs-string">&quot;冯乡⻓&quot;</span>, <span class="hljs-string">&quot;⽪⻓⼭&quot;</span>&#125;<br>s3 = s1 &amp; s2                 <span class="hljs-comment"># 方式一：取两个集合的交集</span><br>s4 = s1.intersection(s2) <span class="hljs-comment"># 方</span></li></ul><p>print(s3, s4)</p><p><span class="hljs-comment">### 3.并集</span><br>s1 = &#123;<span class="hljs-string">&quot;刘能&quot;</span>, <span class="hljs-string">&quot;赵四&quot;</span>, <span class="hljs-string">&quot;⽪⻓⼭&quot;</span>&#125;<br>s2 = &#123;<span class="hljs-string">&quot;刘科⻓&quot;</span>, <span class="hljs-string">&quot;冯乡⻓&quot;</span>, <span class="hljs-string">&quot;⽪⻓⼭&quot;</span>&#125;<br>s3 = s1 | s2               <span class="hljs-comment"># 方式一：取两个集合的并集</span><br>s4 = s1.union(s2)</p><p>print(s3, s4)</p><p><span class="hljs-comment">### 4.差集</span><br>s1 = &#123;<span class="hljs-string">&quot;刘能&quot;</span>, <span class="hljs-string">&quot;赵四&quot;</span>, <span class="hljs-string">&quot;⽪⻓⼭&quot;</span>&#125;<br>s2 = &#123;<span class="hljs-string">&quot;刘科⻓&quot;</span>, <span class="hljs-string">&quot;冯乡⻓&quot;</span>, <span class="hljs-string">&quot;⽪⻓⼭&quot;</span>&#125;<br>s3 = s1 - s2                       <span class="hljs-comment"># 方式一：差集，s1中有且s2中没有的值</span><br>s4 = s1.difference(s2)         <span class="hljs-comment"># 方式二：差集，s1中有且s2中没有的值</span><br></code></pre>:hexoPostRenderEscape–&gt;</p><p>列表和集合的转换：</p><pre><code class="hljs python">v1 = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,<span class="hljs-number">99</span>,<span class="hljs-number">22</span>]s1 = set(v1)l1 = list(s1)print(l1)</code></pre><h4 id="15-python对文件的操作"><a href="#15-python对文件的操作" class="headerlink" title="15. python对文件的操作"></a>15. python对文件的操作</h4><blockquote><p>主要学习就是文件打开的几种模式，，项目中涉及到就是文件上传和下载</p></blockquote><p>主要的文件打开方式：</p><p>模式： w, r, r+<br>方法： open, close, read, write<br>上下文管理器：推崇的方式</p><h4 id="16-python的函数-基础入门"><a href="#16-python的函数-基础入门" class="headerlink" title="16. python的函数 基础入门"></a>16. python的函数 基础入门</h4><blockquote><p>重点：函数的参数</p></blockquote><p>函数的定义：</p><pre><code class="hljs python">shell:    func test()&#123;        函数体    &#125;    test() <span class="hljs-comment">### 函数的调用</span>python:    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span>        函数体    test() <span class="hljs-comment">### 函数调用</span></code></pre><pre><figcaption><span>cal():</span></figcaption><code class="hljs def"></code></pre><p>return的使用</p><p>  # num = 10</p><p>  # num = num + 1</p><p>  # return ‘hello’, ‘kkkk’ ### return来返回结果， 不管下面还有多少代码，都不会执行</p><p>  return num</p><p>a,b = cal() ### hellowrld</p><p>print(a,b)</p><p>如果函数返回多个值，那接收返回值类型是一个元组(‘hello’, ‘kkkk’)</p><p>那什么情况下才会用return呢?</p><p>需要获取函数的执行结果的时候，我们就可以使用return</p><p>‘’’</p><p>参数的分类</p><ul><li><p>位置参数：</p><p>  一一对应，传入实参</p></li></ul><p>  def yue(chat, addr, age):  # chat 形参</p><pre><code>print(&quot;拿出手机&quot;)print(&quot;打开&quot;+chat)print(&quot;找个&quot; + addr +&quot;附近漂亮的&quot; + str(age) + &quot;岁妹子&quot;)print(&quot;约不约&quot;)</code></pre><p>  yue(“北京”,”陌陌”, age=18)  # 实参</p>  <pre><code class="hljs plain"></code></pre><ul><li><p>关键字参数</p><p>‘’’</p><p>关键字参数：</p><p>  通过指定关键字传入参数</p><p>  关键参数后面不能有位置参数， 而位置参数后面可有关键字参数</p><p>‘’’</p></li></ul><p>  def yue(chat, addr, age):  # chat 形参</p><pre><code>print(&quot;拿出手机&quot;)print(&quot;打开&quot;+chat)print(&quot;找个&quot; + addr +&quot;附近漂亮的&quot; + str(age) + &quot;岁妹子&quot;)print(&quot;约不约&quot;)</code></pre><p>  yue(addr=”北京”,chat=”陌陌”, age=18)  # 实参</p><ul><li>默认参数</li></ul><p>默认值:函数声明的时候，必须写到后面</p><p>def stu_info(name, age, sex=’男’):<br>    print(“录入学生信息”)<br>    print(name, age, sex)<br>    print(“录入完毕”)</p><p>stu_info(“张强”, 18, ‘妖’) #默认参数可以修改</p><ul><li><p>动态接收位置参数</p><p>‘’’<br>args：会将所有的元素以元组的方式接收</p><p>‘’’</p></li></ul><p>  def eat(*args):<br>      print(‘我想吃’,args)</p><p>  eat(‘大米饭’,’中米饭’,’小米饭’)</p><p>  def eat(a,b,c=’白菜’,*args):<br>      print(‘我想吃’,a,b,c,args)</p><p>  eat(‘豆腐’,’粉条’,’猪肉’,’大葱’)</p><p>  def eat(a,b, *args, c=’白菜’):<br>      print(‘我想吃’,a,b,c,args)</p><p>  eat(‘豆腐’,’粉条’,’猪肉’,’大葱’)</p><ul><li><p>动态接收关键字参数</p><p>‘’’</p><p>动态获取关键字参数</p><p>会将获取的值打散成一个字典</p><p>‘’’</p></li></ul><p>  def func(**kwargs):</p><pre><code>print(kwargs)  ### &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125; 字典格式print(kwargs.get(&#39;a&#39;))</code></pre><p>  func(a=1, b=2, c=3)</p><ul><li><p>动态接收所有参数</p><p>def func(*args,**kwargs):</p><p>  print(args,kwargs)</p></li></ul><p>  func(1,23,5,a=1,b=6)</p><p>###django 经常用到</p><p>  dic = {‘name’:1,’age’:2}</p><p>  def func(**kwargs):</p><pre><code>print(kwargs)</code></pre><p>  func(**{‘a’:1,’b’:2})</p><p>参数组合：</p><pre><code class="hljs python">第一种：位置参数， 关键字参数， 默认参数test(a, b, c=<span class="hljs-number">1</span>)第二种：动态接收位置参数， 动态接收关键字参数配合起来使用test(*args, **kwargs)dic = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>&#125;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">**kwargs</span>):</span>    print(kwargs)func(**dic)</code></pre><p>函数的注释：<br>def test(a):<br>    ‘’’<br>    测试功能<br>    :param: a<br>    :return: None<br>    ‘’’</p><pre><code>print(&#39;hello&#39;)</code></pre><p>函数的全局变量和局部变量：<br>num = “123” ## 全局变量</p><p>def test():<br>    num = 456  ## 局部变量，只是在函数体内生效<br>    print(num) #456</p><p>test()<br>print(num) #123</p><p>num = “123” ## 全局变量</p><p>def test():<br>    global num  ### gloab 声明局部变量为全局变量，会导致变量污染，global禁用<br>    num = 456<br>    print(num)</p><p>test()<br>print(num)</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
